/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ButtonType, ButtonVariant } from "./components/lego-button/interface";
import { Size } from "./utils/element-interface";
import { InputChangeEventDetail } from "./components/lego-textfield/lego-textfield";
export namespace Components {
    interface LegoButton {
        /**
          * If 'true' user can not interact with the button
         */
        "disabled": boolean;
        /**
          * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
         */
        "download": string | undefined;
        /**
          * Determines width of the button. If true, the button will take up full width of the container.
         */
        "fullWidth": boolean;
        /**
          * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
         */
        "href": string | undefined;
        /**
          * Icon to display to the left side of the button content;
         */
        "iconLeft": string | undefined;
        /**
          * Icon to display to the right side of the button content
         */
        "iconRight": string | undefined;
        /**
          * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
         */
        "rel": string | undefined;
        /**
          * Sets focus on the native `button` in `jll-button`. Use this method instead of the global `button.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * Determines size of the button
         */
        "size": Size;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
         */
        "target": string | undefined;
        /**
          * The type of the button.
         */
        "type": ButtonType;
        /**
          * This attribute indicates the variant of button. Varies by background color and border.
         */
        "variant": ButtonVariant;
    }
    interface LegoGreet {
    }
    interface LegoLink {
    }
    interface LegoTextfield {
        /**
          * If 'true' the input is disabled
         */
        "disabled": boolean;
        /**
          * Placeholder text of input
         */
        "placeholder": string;
        /**
          * Sets blur on the native `input` in `jll-textarea`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `input` in `jll-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * input size
         */
        "size": Size;
        /**
          * A hint to the browser for which keyboard to display. Possible values: ``"text"`, `"tel"`, `"email"`, `"numeric"`, `"decimal"`, and `"password"`.
         */
        "type"?: 'text' | 'tel' | 'email' | 'number' | 'password';
        /**
          * The value of the input.
         */
        "value"?: string | number | null;
    }
}
export interface LegoButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLegoButtonElement;
}
export interface LegoTextfieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLegoTextfieldElement;
}
declare global {
    interface HTMLLegoButtonElement extends Components.LegoButton, HTMLStencilElement {
    }
    var HTMLLegoButtonElement: {
        prototype: HTMLLegoButtonElement;
        new (): HTMLLegoButtonElement;
    };
    interface HTMLLegoGreetElement extends Components.LegoGreet, HTMLStencilElement {
    }
    var HTMLLegoGreetElement: {
        prototype: HTMLLegoGreetElement;
        new (): HTMLLegoGreetElement;
    };
    interface HTMLLegoLinkElement extends Components.LegoLink, HTMLStencilElement {
    }
    var HTMLLegoLinkElement: {
        prototype: HTMLLegoLinkElement;
        new (): HTMLLegoLinkElement;
    };
    interface HTMLLegoTextfieldElement extends Components.LegoTextfield, HTMLStencilElement {
    }
    var HTMLLegoTextfieldElement: {
        prototype: HTMLLegoTextfieldElement;
        new (): HTMLLegoTextfieldElement;
    };
    interface HTMLElementTagNameMap {
        "lego-button": HTMLLegoButtonElement;
        "lego-greet": HTMLLegoGreetElement;
        "lego-link": HTMLLegoLinkElement;
        "lego-textfield": HTMLLegoTextfieldElement;
    }
}
declare namespace LocalJSX {
    interface LegoButton {
        /**
          * If 'true' user can not interact with the button
         */
        "disabled"?: boolean;
        /**
          * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
         */
        "download"?: string | undefined;
        /**
          * Determines width of the button. If true, the button will take up full width of the container.
         */
        "fullWidth"?: boolean;
        /**
          * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
         */
        "href"?: string | undefined;
        /**
          * Icon to display to the left side of the button content;
         */
        "iconLeft"?: string | undefined;
        /**
          * Icon to display to the right side of the button content
         */
        "iconRight"?: string | undefined;
        /**
          * Emitted when the button loses focus.
         */
        "onJllBlur"?: (event: LegoButtonCustomEvent<void>) => void;
        /**
          * Emitted when the button has focus.
         */
        "onJllFocus"?: (event: LegoButtonCustomEvent<void>) => void;
        /**
          * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
         */
        "rel"?: string | undefined;
        /**
          * Determines size of the button
         */
        "size"?: Size;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
         */
        "target"?: string | undefined;
        /**
          * The type of the button.
         */
        "type"?: ButtonType;
        /**
          * This attribute indicates the variant of button. Varies by background color and border.
         */
        "variant"?: ButtonVariant;
    }
    interface LegoGreet {
    }
    interface LegoLink {
    }
    interface LegoTextfield {
        /**
          * If 'true' the input is disabled
         */
        "disabled"?: boolean;
        /**
          * Emitted when the input loses focus.
         */
        "onJllBlur"?: (event: LegoTextfieldCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onJllChange"?: (event: LegoTextfieldCustomEvent<InputChangeEventDetail>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onJllFocus"?: (event: LegoTextfieldCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onJllInput"?: (event: LegoTextfieldCustomEvent<InputEvent>) => void;
        /**
          * Placeholder text of input
         */
        "placeholder"?: string;
        /**
          * input size
         */
        "size"?: Size;
        /**
          * A hint to the browser for which keyboard to display. Possible values: ``"text"`, `"tel"`, `"email"`, `"numeric"`, `"decimal"`, and `"password"`.
         */
        "type"?: 'text' | 'tel' | 'email' | 'number' | 'password';
        /**
          * The value of the input.
         */
        "value"?: string | number | null;
    }
    interface IntrinsicElements {
        "lego-button": LegoButton;
        "lego-greet": LegoGreet;
        "lego-link": LegoLink;
        "lego-textfield": LegoTextfield;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "lego-button": LocalJSX.LegoButton & JSXBase.HTMLAttributes<HTMLLegoButtonElement>;
            "lego-greet": LocalJSX.LegoGreet & JSXBase.HTMLAttributes<HTMLLegoGreetElement>;
            "lego-link": LocalJSX.LegoLink & JSXBase.HTMLAttributes<HTMLLegoLinkElement>;
            "lego-textfield": LocalJSX.LegoTextfield & JSXBase.HTMLAttributes<HTMLLegoTextfieldElement>;
        }
    }
}
